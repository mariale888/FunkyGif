#include "ofApp.h"

//--------------------------------------------------------------
void ofApp::setup(){

ofSetFrameRate(10);
ofEnableSmoothing();

radius      = 35;
num_circles = 238; //204
num_per_row = 17;
time_open   = 0.5;
window_color = ofColor(249,242,231);//(238, 232, 222);
//window_color = ofColor(238, 232, 222);
background_color = ofColor(153,178,183);//(73,72,104);

//Creating main circle windows
int j = -1;
for (int i = 0;i< num_circles;i++)
{
int k = i % num_per_row;
float x = radius + (k * radius*1.8) - 30;
if(k == 0)
j++;

float y = (radius) + (j * radius*1.8) -5;
circles.push_back(MyCircles(ofVec3f(x, y, 0), window_color, radius, time_open, ofGetFrameNum(), windowObj)); //ofVec3f(52,56,56)
}


grabbed.allocate(ofGetWidth(), ofGetHeight(), OF_IMAGE_COLOR_ALPHA);
startRecording = false;
isRandom    = false;
isHeart     = false;
isNumasbala = true;
openTime = false;

particleType = multipleSections;

if(particleType == multipleSections)
{
multipleS_colors.push_back(ofColor(26,26,25));
multipleS_colors.push_back(ofColor(36,36,35));
multipleS_colors.push_back(ofColor(46,46,45));

//side
multipleS_colors.push_back(ofColor(0,223,252));
multipleS_colors.push_back(ofColor(0,168,198));
multipleS_colors.push_back(ofColor(64,192,203));

// numasbala
bound_sections.push_back(ofVec2f(calcPos(9,0), circles.size()-2) ); // bottom
bound_sections.push_back(ofVec2f(calcPos(1,7), calcPos(3,12)) );   // top
bound_sections.push_back(ofVec2f(calcPos(1,8), calcPos(11,8)) );   // center top bottom
}
if(particleType == moveSides)
{
moveSides_colors.push_back(ofColor(0,223,252));
moveSides_colors.push_back(ofColor(0,168,198));
moveSides_colors.push_back(ofColor(64,192,203));
}
if(particleType == followEdge)
{
followEdge_colors.push_back(ofColor(6,6,5));
followEdge_colors.push_back(ofColor(16,16,15));
followEdge_colors.push_back(ofColor(34,33,32));
}
randomColor = false;

//heart shape
if(isHeart)
{
int t[] = { calcPos(0,4), calcPos(0,12),calcPos(1,3), calcPos(1,5),calcPos(1,11),calcPos(1,13),calcPos(2,2),calcPos(2,6),calcPos(2,10),calcPos(2,14),
calcPos(3,2),calcPos(3,7),calcPos(3,9),calcPos(3,14), calcPos(4,2), calcPos(4,8),calcPos(4,14),calcPos(5,3),calcPos(5,13),calcPos(6,4),
calcPos(6,12),calcPos(7,5),calcPos(7,11), calcPos(8,6), calcPos(8,10), calcPos(9,7), calcPos(9,9),calcPos(10,8) };

wayPoints.push_back( calcPos(0,4)); wayPoints.push_back( calcPos(2,6));wayPoints.push_back( calcPos(4,8));wayPoints.push_back( calcPos(2,10));
wayPoints.push_back( calcPos(0,12)); wayPoints.push_back( calcPos(2,14));wayPoints.push_back( calcPos(4,14));wayPoints.push_back( calcPos(7,11));
wayPoints.push_back( calcPos(10,8)); wayPoints.push_back( calcPos(7,5));wayPoints.push_back( calcPos(4,2));wayPoints.push_back( calcPos(2,2));
for (int i = 0; i < (sizeof(t) / sizeof(int)); ++i) init_pos.push_back(t[i]);
}

// numasbala shape
if(isNumasbala)
{
int t[] = { calcPos(1,8), calcPos(2,8),calcPos(2,9), calcPos(3,9),calcPos(3,10),calcPos(4,8),calcPos(5,8),calcPos(6,3),calcPos(6,4),
calcPos(6,5),calcPos(6,6),calcPos(6,7),calcPos(6,8), calcPos(6,9), calcPos(6,10),calcPos(6,11),calcPos(6,12),calcPos(6,13),calcPos(6,14),
calcPos(7,3),calcPos(7,13),calcPos(8,4), calcPos(8,12), calcPos(9,5), calcPos(9,11), calcPos(10,6),calcPos(10,10),calcPos(11,7),
calcPos(11,8),calcPos(11,9) };

wayPoints.push_back( calcPos(1,8)); wayPoints.push_back( calcPos(3,10)); wayPoints.push_back( calcPos(3,9));wayPoints.push_back( calcPos(4,8));
wayPoints.push_back( calcPos(6,8));wayPoints.push_back( calcPos(6,13)); wayPoints.push_back( calcPos(7,13));wayPoints.push_back( calcPos(11,9));
wayPoints.push_back( calcPos(11,7));wayPoints.push_back( calcPos(7,3)); wayPoints.push_back( calcPos(6,3));wayPoints.push_back( calcPos(6,8));

for (int i = 0; i < (sizeof(t) / sizeof(int)); ++i) init_pos.push_back(t[i]);
}
int row = 1;
float extraTime = 0;
for(vector<int>::iterator it = init_pos.begin(); it != init_pos.end();++it){
if(*it / num_per_row > row){
row++;
extraTime += 0.0;
}
circles[*it].setOpen(ofGetElapsedTimef() + extraTime, 0);
}


// init particles
addParticles(true);
}

int ofApp::calcPos(int x, int y)
{
return (num_per_row * x) + y;
}


//--------------------------------------------------------------
void ofApp::update(){



if(ofGetFrameNum()%2 == 0 && fish.size() < num_particles){
addParticles(false);
}

for (int i = 0;i< fish.size();i++)
{
float period    =  ofRandom(2, 12);
float amplitude = ofRandom(2, 12);
float speed     = ofRandom(2, 12);

ofVec2f p = ofVec2f();
if(fish[i].type == followWayP){
speed = ofRandom(8, 16);
p = circles[wayPoints[fish[i].curPoint]].pos;
if(fish[i].arrived)
{
fish[i].arrived = false;
fish[i].curPoint = (fish[i].curPoint+1)%wayPoints.size();
p = circles[wayPoints[fish[i].curPoint]].pos;
}
}
if(fish[i].type == moveRight)
{
period = 10;
}
fish[i].updateParticles(p,amplitude, period, speed);
}

//update circles that are closing
for (vector<MyCircles>::iterator it = circles.begin() ; it != circles.end(); ++it)
it->updateStatus();


// if(ofGetFrameNum()%10 == 0)
//   startRecording = !startRecording;
if(ofGetFrameNum()%5 == 0)
openTime = !openTime;


if(ofGetFrameNum()%2 == 0) {
if(isHeart || isNumasbala)
{
int row = 1; //0
int add = 0;
float extraTime = 0;
for(vector<int>::iterator it = init_pos.begin(); it != init_pos.end();++it){

if(openTime)
{
if(!circles[*it].isClose){
if(*it / num_per_row >row)
row++;
continue;
}
if(*it / num_per_row > row && add > 4)break;
if(*it / num_per_row > row){
add ++;
row++;
}

circles[*it].setOpen(ofGetElapsedTimef() + time_open, 0);
}
else{

if(circles[*it].isClose){
if(*it / num_per_row >row)
row++;
continue;
}
if(*it / num_per_row > row && add > 4)break;
if(*it / num_per_row > row){
add ++;
row++;
}

circles[*it].setClose();
}
}
}

// Add open closed circles randomly
if(isRandom)
{
int r = ofRandom(0, num_circles);
if(circles[r].isClose)
{
circles[r].setOpen(ofGetElapsedTimef(), 0);

}
}
}
}

//--------------------------------------------------------------
void ofApp::draw(){
ofBackground(background_color);
// drawing all my fish

for(int i = 0; i < fish.size();i++) {
MyCircles temp = fish[i];
if(particleType == multipleSections)
{ // 10,8
cout<<circles[bound_sections[0].x].isClose<<endl;
if(temp.type == followWayP || (temp.type == moveBound && !circles[bound_sections[2].x].isClose) ||
(temp.type == moveRight && !circles[bound_sections[2].y].isClose) )  {
ofSetColor(temp.color);
ofFill();
ofCircle(temp.pos.x, temp.pos.y, temp.pos.z, temp.curRadius);
}
}
else
{
ofSetColor(temp.color);
ofFill();
ofCircle(temp.pos.x, temp.pos.y, temp.pos.z, temp.curRadius);
}

}
//for(int i = 12;i<18;i++)
//circles[i].radius = 1;
// drawing all my circles
for(int i = 0; i < circles.size();i++) {
MyCircles temp = circles[i];
ofSetColor(temp.color);
ofFill();
ofCircle(temp.pos.x, temp.pos.y, temp.pos.z, temp.curRadius);
}

grabbed.grabScreen(0, 0, ofGetWidth(), ofGetHeight());

string name ="img_" + ofToString(ofGetFrameNum()) + ".jpg";
if(startRecording)
grabbed.saveImage(name);
}

//--------------------------------------------------------------
void ofApp::addParticles(bool isInit) {

if(particleType == followEdge)
{
num_particles = 200;
//add particles along enge
ofColor c = followEdge_colors[ofRandom(followEdge_colors.size())];
if(randomColor)
c = ofColor(ofRandom(255),ofRandom(255),ofRandom(255));

addFish(circles[calcPos(0,8)].pos, c, followWayP);
}

if(particleType == moveSides)
{
num_particles = 200;
int side_particles = 10;
if(!isInit)side_particles = 1;

ofColor c = moveSides_colors[ofRandom(moveSides_colors.size())];
//adding particles that move right left
for(int i = 0;i < side_particles; i++){

c = moveSides_colors[ofRandom(moveSides_colors.size())];
if(randomColor)
c = ofColor(ofRandom(255),ofRandom(255),ofRandom(255));

int r = ofRandom(calcPos(8,0), circles.size()-2);
addFish(circles[r].pos, ofColor(0,223,252), moveRight);
}
}
if(particleType == multipleSections)
{
num_particles = 2000;
int side_particles = 100;
int bound_particles = 100;

if(!isInit) {
side_particles  = 1;
bound_particles = 1;
}
ofColor c = multipleS_colors[ofRandom(0, 2)];
if(randomColor)
c = ofColor(ofRandom(255),ofRandom(255),ofRandom(255));

//adding particles that move right left
for(int i = 0;i < side_particles; i++){

ofColor c_ = multipleS_colors[ofRandom(3, multipleS_colors.size())];
if(randomColor)
c_ = ofColor(ofRandom(255),ofRandom(255),ofRandom(255));
int r = ofRandom(bound_sections[0].x, bound_sections[0].y);
addFish(circles[r].pos, c_, moveRight);
}
for(int i = 0;i < bound_particles;i++){


int r = ofRandom(bound_sections[1].x, bound_sections[1].y);
addFish(circles[r].pos, c, moveBound);
}
//add particles along enge
addFish(circles[calcPos(0,8)].pos, c, followWayP);
}


}

//--------------------------------------------------------------
void ofApp::addFish(ofVec2f pos, ofColor color, TypeCircle type_) {

MyCircles newFish =  MyCircles(ofVec3f(pos.x, pos.y, 0), color, ofRandom(3, 12), time_open, ofGetFrameNum(), type_) ;

if(newFish.type == followWayP){

newFish.pos = circles[wayPoints[0]].pos;
}

fish.push_back(newFish);
}

//--------------------------------------------------------------
void ofApp::keyPressed(int key){

if(key == 'g')
startRecording = !startRecording;
}

//--------------------------------------------------------------
void ofApp::keyReleased(int key){

}

//--------------------------------------------------------------
void ofApp::mouseMoved(int x, int y ){

}

//--------------------------------------------------------------
void ofApp::mouseDragged(int x, int y, int button){

}

//--------------------------------------------------------------
void ofApp::mousePressed(int x, int y, int button){

}

//--------------------------------------------------------------
void ofApp::mouseReleased(int x, int y, int button){

}

//--------------------------------------------------------------
void ofApp::windowResized(int w, int h){

}

//--------------------------------------------------------------
void ofApp::gotMessage(ofMessage msg){

}

//--------------------------------------------------------------
void ofApp::dragEvent(ofDragInfo dragInfo){

}
